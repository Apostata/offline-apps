Offline App and sites

Service workers:
    funcionam como um proxy entre o servidor e a aplicação,
    interceptando requisições, criação efetiva de experiência
    offline, atualizando conteúdo no servidor, acesso a push
    notifications e sincronizando apis em segundo plano.

    Criando e registrando um service worker:

        crie um arquivo /sw/index.js: 
            Por padrão o escopo do service worker é o domínio.

            self.addEventListener('fetch', function(event){
                console.log(event.request);
            });
        
        chamando da página do site:
            <script>
                if('serviceWorker' in navigator){
                    window.addEventListener('load', function(){
                        navigator.serviceWorker.register('/sw.js')
                        .then(function(){
                            console.log('Service Worker registered!');
                        }).catch(function(){
                            console.log('Registration failed')
                        });
                    });
                }
            </script>

            o ciclo de vida do service worker é diferente do da página,
            ele materá enquanto o escopo for o mesmo.

            Para recicla-lo basta navegar para uma página que tenha o escopo
            diferente do service worker ou recarregar com shift + F5.

    Respondendo a uma interceptação do service worker:

        self.addEventListener('fetch', function(event){
            event.respondWith(
                new Response("<h1 class=\"a-winner-is-me\">Resposta</h1>", {
                    headers:{"Content-Type": "text/html;charset=UTF8"}
                })
            )
        })

    Interceptando todos os .jpg e devolvendo um .gif:

        self.addEventListener('fetch', function(event){
            if(event.request.url.endsWith('.jpg')){
                event.respondWith(
                    fetch('/imgs/dr-evil.gif')
                )
            }
        })

    verificando o cache:
     self.addEventListener('activate', function(event){ //assim que terminar a instalação
        event.waitUntil(
            caches.keys().then(function(cacheNames){
                return Promise.all(
                    cacheNames.filter(function(cacheName){
                        return cacheName.startsWith('wttr-') && 
                        cacheName != staticCacheName;
                    }).map(function(cacheName){
                        return cache.delete(cacheName)
                    })
                );
            })
        )
    });
    
    Status dos service Workers:
        ao se registrar um service worker ele retornará uma promise
        com alguns métodos e propriedades:

        navigator.serviceWorker.register('/sw.js')
        .then(function(reg){
            reg.unregister();
            reg.update();
            reg.installing;
            reg.waiting;
            reg.active;
        })

        installing  : sendo instalado mas não completou a instalação,
        installed   : está instalado mas ainda não está ativo  
        activating  : está sendo ativado,
        activated   : pronto para receber eventos,
        redundant   : foi descartado,substituido por outro ou falhou
        ao ser instalado

        sempre que uma propriedado do estado muda o service worker
        dispara um evendo 'statechange'

       

    Verificando se há atulizações:
        if(!navigator.serviceWorker.controller){
            // página carregou sem usar um serviceWorker,
            // carregando o conteúdo da rede
        }

        Caso não tenha carregado o conteúdo da rede:

            navigator.serviceWorker.register('/sw.js')
                .then(function(reg){

                // se tem um worker em waiting, tem atualização
                    if(reg.waiting){
                        // tem um update pronto!
                    }
               

            ...
                // se tem um worker em instaling, tem atualização em progresso
                //precisa verificar quando mudar de estado e o estado
                //for installed para confirmar se a atualização não falhou
                    
                    if(reg.installing){
                        // tem um update en progresso
                        reg.installing.addEventListener('statechange', function(){
                            if(this.state === "installed"){
                                // tem um update pronto!
                            }
                        })
                    }

            ...
                // se tem um update, ver se o instado é installed
                reg.addEventListener('updatefound', function(){
                    reg.installing.addEventListener('statechange', function(){
                        if(this.state === 'installed'){
                            // tem um update pronto!
                        }
                    })
                })
    
    Trocando Mensagens com o Service worker:

        Da página par ao worker:
            navigator.serviceWorker.register('/sw.js')
            .then(function(reg){
                
                reg.instaling.postMessage({foo: "bar"});

            })
        
        Recebendo Mensagem no worker:
            self.addEventListener('message', function(event){
                console.log(event.data) // {foo: "bar"}
            });
    
    Vefificar se há mudança no serviceWorker:

        navigator.serviceWorker.addEventListener('controllerchange', function(){
            // mudou de serviceWorker
        });

    Atualizar para o serviceWorker novo:
        dentro do código do worker:

            ...
            self.skipWaiting();
            